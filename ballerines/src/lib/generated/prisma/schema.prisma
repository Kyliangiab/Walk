// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// Enums
// ========================

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

enum Category {
  BALLET_FLAT
}

enum Gender {
  KIDS
  MEN
  WOMEN
  UNISEX
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  SHIPPED
  DELIVERED
  CANCELED
}

enum Grade {
  A
  B
  C
  D
}

enum TradeInStatus {
  RECEIVED
  APPROVED
  REJECTED
  CREDIT_ISSUED
}

// ========================
// Models
// ========================

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  hashedPassword String?
  name           String?
  role           Role    @default(CUSTOMER)

  addresses Address[]
  orders    Order[]
  carts     Cart[]

  createdAt DateTime @default(now())
}

model Product {
  id          String    @id @default(cuid())
  sku         String    @unique
  name        String
  brand       String?
  description String
  category    Category
  gender      Gender
  materials   String[]
  color       String
  images      String[]
  variants    Variant[]
  ecoScore    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Variant {
  id                  String          @id @default(cuid())
  productId           String
  product             Product         @relation(fields: [productId], references: [id])
  sizeEu              Int
  stock               Int             @default(0)
  barcode             String?
  priceCents          Int
  compareAtPriceCents Int?
  isActive            Boolean         @default(true)
  StockMovements      StockMovement[]

  cartItems  CartItem[]
  orderItems OrderItem[]
}

model StockMovement {
  id        String   @id @default(cuid())
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  delta     Int
  reason    String
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id             String @id @default(cuid())
  cartId         String
  variantId      String
  qty            Int
  unitPriceCents Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])
}

model Order {
  id         String      @id @default(cuid())
  userId     String?
  email      String
  status     OrderStatus @default(PENDING)
  user       User?       @relation(fields: [userId], references: [id])
  items      OrderItem[]
  totalCents Int
  paymentRef String?

  shipping   Address? @relation("OrderShipping", fields: [shippingId], references: [id])
  shippingId String?  @unique

  createdAt DateTime @default(now())
}

model OrderItem {
  id             String @id @default(cuid())
  orderId        String
  variantId      String
  qty            Int
  unitPriceCents Int

  order   Order   @relation(fields: [orderId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])
}

model Address {
  id       String  @id @default(cuid())
  userId   String?
  fullName String
  line1    String
  line2    String?
  city     String
  zip      String
  country  String
  phone    String?

  user  User?  @relation(fields: [userId], references: [id])
  order Order? @relation("OrderShipping")
}

model Consent {
  id        String   @id @default(cuid())
  userId    String?
  category  String
  granted   Boolean
  createdAt DateTime @default(now())
}

model TradeInRequest {
  id                   String        @id @default(cuid())
  userId               String?
  email                String
  condition            Grade
  photos               String[]
  status               TradeInStatus @default(RECEIVED)
  estimatedCreditCents Int?
  createdAt            DateTime      @default(now())
}
